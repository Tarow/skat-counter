// Code generated by templ - DO NOT EDIT.

// templ: version: 0.2.476
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

func PlayerInput() templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<form class=\"tag-input sortable\" id=\"tagInput\"><input type=\"text\" name=\"playername\" id=\"hiddenInput\" onkeydown=\"handleKeyDown(event)\"> <button type=\"submit\" class=\"btn btn-primary\" hx-post=\"/test\" hx-swap=\"none\" hx-include=\"#tagInput\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Var2 := `Submit`
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ_7745c5c3_Var2)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</button></form><script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Var3 := `
    const tagInput = document.getElementById('tagInput');
    const hiddenInput = document.getElementById('hiddenInput');

    function handleKeyDown(event) {
        console.log("handlekey was triggered")
        if (event.key === 'Enter') {
        event.preventDefault();
        const tagText = hiddenInput.value.trim();

        if (tagText !== '') {
            addTag(tagText);
            hiddenInput.value = '';
        }
        }
    }

    function addTag(text) {
        const tag = document.createElement('div');
        tag.innerHTML=text

        const tagInputField = document.createElement('input');
        tagInputField.className = 'tag-input-field';
        tagInputField.type = 'text';
        tagInputField.value = text;
        tagInputField.hidden = true;
        tagInputField.name="playername"

        const tagClose = document.createElement('span');
        tagClose.className = 'tag-close';
        tagClose.textContent = 'Ã—';
        tagClose.addEventListener('click', () => removeTag(tag));

        tag.appendChild(tagInputField);
        tag.appendChild(tagClose);

        tagInput.insertBefore(tag, hiddenInput);
    }

    function removeTag(tag) {
        tagInput.removeChild(tag);
    }

    function focusInput() {
        hiddenInput.focus();
    }
  `
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ_7745c5c3_Var3)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}
